{"name":"react-cropperjs","tagline":"A React component wrapper of cropperjs","body":"# react-cropperjs\r\n\r\nA React Component wrapper of [cropperjs](https://github.com/fengyuanchen/cropperjs) without jQuery as a dependency. If you want to use jQuery, check out the original project [react-cropper](https://github.com/roadmanfong/react-cropper).\r\n\r\n[![NPM](https://nodei.co/npm/react-cropperjs.png?downloads=true)](https://nodei.co/npm/react-cropperjs/)\r\n\r\n## Demo\r\n\r\n[See the demo in action](http://tapp-tv.github.io/react-cropperjs/example/)\r\n\r\n## Installation\r\n\r\nInstall via [npm](https://www.npmjs.com/package/react-cropperjs)\r\n\r\n```shell\r\nnpm install --save react-cropperjs\r\n```\r\n\r\n### Webpack User\r\n\r\nYou also need a couple of loaders for webpack\r\n\r\n```shell\r\nnpm install --save-dev style-loader css-loader\r\n```\r\n\r\n### Browserify User\r\n\r\nhttps://github.com/cheton/browserify-css\r\n\r\n```shell\r\nnpm i --save-dev browserify-css\r\n```\r\n\r\nCompile your project with command line like\r\n\r\n```shell\r\n browserify -t reactify -g browserify-css index.jsx > bundle.js\r\n```\r\n\r\nIf you are using `gulp`, `browserify` or other build tools, make sure you enable `global` option `true`\r\n\r\nFor example in `gulp` you should do\r\n\r\n```js\r\nb.transform(browserifycss, {global: true});\r\n```\r\n\r\n## Quick Example using ES6\r\n\r\n```js\r\nimport React from 'react';\r\nimport CropperJS from 'react-cropperjs';\r\n\r\nclass Demo extends React.Component {\r\n\r\n  _crop(){\r\n    // image in dataUrl\r\n    console.log(this.refs.cropper.getCroppedCanvas().toDataURL());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CropperJS\r\n        ref='cropper'\r\n        src='http://i.imgur.com/n483ZwJ.jpg'\r\n        style={{height: 400, width: '100%'}}\r\n        // Cropper.js options\r\n        aspectRatio={16 / 9}\r\n        guides={false}\r\n        crop={this._crop.bind(this)} />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nAnd for those working in ES5:\r\n\r\n```js\r\nvar React = require('react');\r\nvar CropperJS = require('react-cropperjs');\r\n\r\nvar Demo = React.createClass({\r\n\r\n  _crop: function() {\r\n    // image in dataUrl\r\n    console.log(this.refs.cropper.getCroppedCanvas().toDataURL());\r\n  },\r\n\r\n  render: function() {\r\n    return (\r\n      <CropperJS\r\n        ref='cropper'\r\n        src='http://i.imgur.com/n483ZwJ.jpg'\r\n        style={{height: 400, width: '100%'}}\r\n        // Cropper.js options\r\n        aspectRatio={16 / 9}\r\n        guides={false}\r\n        crop={this._crop} />\r\n    );\r\n  }\r\n});\r\n\r\n```\r\n\r\n\r\n## Options\r\n\r\n### src\r\n* Type: `string`\r\n* Default: `null`\r\n\r\n```js\r\n  <CropperJS src='http://i.imgur.com/n483ZwJ.jpg' />\r\n```\r\n\r\n### Other options\r\n\r\nAccepts all options available in cropperjs as attributes. See [docs](https://github.com/fengyuanchen/cropperjs).\r\n\r\n```js\r\n  <CropperJS\r\n    src='http://i.imgur.com/n483ZwJ.jpg'\r\n    aspectRatio={16 / 9}\r\n    guides={false}\r\n    crop={this._crop} />\r\n```\r\n\r\n## Methods\r\n\r\nAssign a `ref` attribute to use [methods](https://github.com/fengyuanchen/cropper#methods)\r\n\r\n```js\r\nimport React from 'react';\r\nimport CropperJS from 'react-cropperjs';\r\n\r\nclass Demo extends React.Component {\r\n\r\n  _crop() {\r\n    let dataUrl = this.refs.cropper.getCroppedCanvas().toDataURL();\r\n    console.log(dataUrl);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <CropperJS\r\n        ref='cropper'\r\n        src='http://i.imgur.com/n483ZwJ.jpg'\r\n        crop={this._crop.bind(this)} />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n`React.createClass` has a built-in magic feature that binds all methods to `this` automatically for you. When using ES6 syntax, remember to pre-bind in the constructor or in the attribute (as shown in the above example). Otherwise See [autobinding](https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1. html#autobinding) docs for more details.\r\n\r\n## Callbacks\r\n\r\nUnlike `cropper`, `cropperjs` doesn't support events, it supports the following callbacks:\r\n\r\n* [build](https://github.com/fengyuanchen/cropperjs#build)\r\n* [built](https://github.com/fengyuanchen/cropperjs#built)\r\n* [cropstart](https://github.com/fengyuanchen/cropperjs#cropstart)\r\n* [cropmove](https://github.com/fengyuanchen/cropperjs#cropmove)\r\n* [cropend](https://github.com/fengyuanchen/cropperjs#cropend)\r\n* [crop](https://github.com/fengyuanchen/cropperjs#crop)\r\n* [zoom](https://github.com/fengyuanchen/cropperjs#zoom)\r\n\r\n```js\r\nimport React from 'react';\r\nimport CropperJS from 'react-cropperjs';\r\n\r\nclass CallbackDemo extends React.Component {\r\n   _build() {\r\n      console.log('_build');\r\n   }\r\n   _built() {\r\n      console.log('_built');\r\n   }\r\n   _cropstart(data) {\r\n      console.log('_cropstart', data.action);\r\n   }\r\n   _cropmove(data) {\r\n      console.log('_cropmove', data.action);\r\n   }\r\n   _cropend(data) {\r\n      console.log('_cropend', data.action);\r\n   }\r\n   _zoom(data) {\r\n      console.log('_zoom', data.ratio);\r\n   }\r\n   _crop(data) {\r\n      console.log('_crop', data);\r\n   }\r\n   render() {\r\n      return (\r\n         <CropperJS\r\n           ref='cropper'\r\n           src='http://i.imgur.com/n483ZwJ.jpg'\r\n           build={this._build}\r\n           built={this._built}\r\n           cropstart={this._cropstart}\r\n           cropmove={this._cropmove}\r\n           cropend={this._cropend}\r\n           zoom={this._zoom}\r\n           crop={this._crop} />\r\n         );\r\n   }\r\n}\r\n```\r\n\r\nRemember to bind `this` in the attributes or pre-bind constructor if you're going to be accessing `this` in the callback methods.\r\n\r\n## Build\r\n\r\n```\r\nnpm run build\r\n```\r\n\r\nBuild example\r\n```\r\nnpm run build-example\r\n```\r\n\r\n## Related Projects\r\n\r\n[JavaScript Canvas to Blob](https://github.com/blueimp/JavaScript-Canvas-to-Blob)\r\n\r\nA lot of times, you'll get a `canvas` element drawn with the cropped image and will need to upload it to the server.\r\n\r\nYou can use [canvas.toDataURL](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL) to get a Data URL, or use [canvas.toBlob](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob) to get a blob and upload it to server with [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) if the browser supports these APIs.\r\n\r\n## License\r\nMIT\r\n","google":"UA-32986721-10","note":"Don't delete this file! It's used internally to help with page regeneration."}